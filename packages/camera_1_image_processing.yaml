########################
### Image processing ###
########################
image_processing:
  - platform: deepstack_object
    ip_address: localhost
    port: 5000
    api_key: !secret deepstack_password
    save_file_folder: /config/camera/deepstack_photo/
    save_timestamped_file: True
    targets:
      - person
    source:
      - entity_id: camera.kamera_1
        name: deepstack_camera_1

##############
### Camera ###
##############
camera:
  - platform: local_file
    name: Camera 1 Latest person
    file_path: /config/www/latest_person/camera_1_1.jpg
  - platform: local_file
    name: Camera 1 Latest person away
    file_path: /config/www/latest_person_away/camera_1_1.jpg

##################
### Automation ###
##################
automation:
  ###################################
  ### Processes image every 5 sec ###
  ###################################
  - alias: Camera 1 Image processing
    trigger:
      - platform: time_pattern
        seconds: "/5"
    action:
      - service: image_processing.scan
        data:
          entity_id: image_processing.deepstack_camera_1

  ############################################
  ### Camera 1 Record when person detected ###
  ############################################
  - alias: Camera 1 Record when person detected
    trigger:
      - platform: time_pattern
        seconds: "/1"
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: group.track_for_home_devices
          state: 'not_home'
        - condition: state
          entity_id: binary_sensor.camera_1_person_detected
          state: 'on'
#        - condition: state
#          entity_id: input_boolean.camera_1_recording
#          state: 'off'
    action:
#      - service: input_boolean.turn_on
#        entity_id: input_boolean.camera_1_recording
      - service: camera.record
        data:
          entity_id: camera.kamera_1
          filename: '/config/camera/person/camera_1_{{ now().strftime("%Y%m%d-%H%M%S") }}.mp4'
          lookback: 0
          duration: 10
#      - service: input_boolean.turn_off
#        entity_id: input_boolean.camera_1_recording

  ###########################################
  ### Camera 1 Image when person detected ###
  ###########################################
  - alias: Camera 1 Image when person detected
    trigger:
      - platform: state
        entity_id: binary_sensor.camera_1_person_detected
        to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: group.track_for_home_devices
          state: 'not_home'
    action:

    # Run script that repeat as long person detected
      - service: script.camera_1_person_detected_1


  ##################################
  ### Camera 1 Copy photo if still nobody home after 2 minutesImage when person detected ###
#      - delay:
#          minutes: 2
#      - service: script.camera_1_latest_motion_away_1

  ####################################################
  ### Max light friggebod fasad if person detected ###
  ####################################################
  - alias: Max light friggebod fasad if person detected
    trigger:
      - platform: state
        entity_id: binary_sensor.camera_1_person_detected
        to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: light.friggebod_fasad
          state: 'on'
    action:
      - service: light.turn_on
        data:
          entity_id: light.friggebod_fasad
          brightness_pct: 100
          transition: 5

  ###################################################
  ### Max light förråd fasad if person detected ###
  ###################################################
  - alias: Max light förråd fasad if person detected
    trigger:
      - platform: state
        entity_id: binary_sensor.camera_1_person_detected
        to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: light.forrad_fasad
          state: 'on'
    action:
      - service: light.turn_on
        data:
          entity_id: light.forrad_fasad
          brightness_pct: 100
          transition: 5

  #########################################################
  ### Reset light friggebod fasad if no person detected ###
  #########################################################
  - alias: Reset light friggebod fasad if person no detected
    trigger:
      - platform: state
        entity_id: binary_sensor.camera_1_person_detected
        to: 'off'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: light.friggebod_fasad
          state: 'on'
    action:
      - service: light.turn_on
        data:
          entity_id: light.friggebod_fasad
          brightness_pct: 30
          transition: 5

  ######################################################
  ### Reset light förråd fasad if no person detected ###
  ######################################################
  - alias: Reset light förråd fasad if person no detected
    trigger:
      - platform: state
        entity_id: binary_sensor.camera_1_person_detected
        to: 'off'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: light.forrad_fasad
          state: 'on'
    action:
      - service: light.turn_on
        data:
          entity_id: light.forrad_fasad
          brightness_pct: 30
          transition: 5

  ######################################
  ### Flash light if person detected ###
  ######################################
  - alias: Flash light if person detected
    trigger:
      - platform: state
        entity_id: binary_sensor.camera_1_person_detected
        to: 'on'
    action:
      - service: light.toggle
        entity_id: light.hall_skap
      - service: light.toggle
        entity_id: light.hall_byra
      - delay:
          seconds: 2
      - service: light.toggle
        entity_id: light.hall_skap
      - service: light.toggle
        entity_id: light.hall_byra
      - service: automation.turn_off
        entity_id: automation.flash_light_if_person_detected

##############
### Script ###
##############
script:
  camera_1_person_detected_1:
    sequence:
    # Save timestamp for person detected
      - service: input_text.set_value
        entity_id: input_text.camera_1_person_detected_timestamp
        data_template: 
          value: '{{ now().strftime("%Y%m%d_%H%M%S") }}'

    # Save a photo with timestamp 
      - service: camera.snapshot
        data:
          entity_id: camera.kamera_1
          filename: '/config/camera/person/camera_1_{{ states.input_text.camera_1_person_detected_timestamp.state }}.jpg'

    # Make a copy as latest motion, to be used when detect that nobody home
      - service: shell_command.camera_1_copy_to_latest_motion_1

    # Make a copy as latest motion, to share    
      - service: shell_command.camera_1_copy_to_latest_motion_2

    # Run part 2 of the script if person still detected, otherwise exit
      - service: script.turn_on
        data_template:
          entity_id: >
            {% if is_state('binary_sensor.camera_1_person_detected', 'on') %}
              script.camera_1_person_detected_2
            {% endif %}

  camera_1_person_detected_2:
    sequence:

    # Wait 2 sec before continue
      - delay:
          seconds: 1

    # Run part 1 of the script if person still detected, otherwise exit
      - service: script.turn_on
        data_template:
          entity_id: >
            {% if is_state('binary_sensor.camera_1_person_detected', 'on') %}
              script.camera_1_person_detected_1
            {% endif %}


  camera_1_latest_motion_away_1:
    sequence:
      - service: script.turn_on
        data_template:
          entity_id: >
            {% if is_state('group.track_for_home_devices', 'not_home') %}
              script.camera_1_latest_motion_away_2
            {% endif %}

  camera_1_latest_motion_away_2:
    sequence:
      - service: shell_command.camera_1_copy_latest_motion_away_1
      - service: notify.pushbullet
        data:
          title: "{{ now().strftime('%H:%M %Y-%m-%d') }}"
          message: "Person detekterad, senaste bild"
          data:
            file: /config/www/latest_person_away/camera_1_1.jpg

#####################
### Shell command ###
#####################
shell_command:
  # Copy latest motion person
  camera_1_copy_to_latest_motion_1: "cp '/config/camera/person/camera_1_{{ states.input_text.camera_1_person_detected_timestamp.state }}.jpg' '/config/camera/person/camera_1_latest.jpg'"
  camera_1_copy_to_latest_motion_2: "cp '/config/camera/person/camera_1_{{ states.input_text.camera_1_person_detected_timestamp.state }}.jpg' '/config/www/latest_person/camera_1_1.jpg'"
  camera_1_copy_latest_motion_away_1: 'cp /config/camera/person/camera_1_*.jpg /config/www/latest_person_away/'

#####################
### Input Boolean ###
#####################
input_boolean:
  camera_1_recording:
    name: Camera 1 spelar in
    initial: off

##############
### Sensor ###
##############
sensor:
  - platform: template
    sensors:
      camera_1_num_person_detected:
        friendly_name: Camera 1 antal personer
        value_template: "{{ states.image_processing.deepstack_camera_1.attributes.summary['person'] }}"

#####################
### Binary Sensor ###
#####################
binary_sensor:
  - platform: template
    sensors:
      camera_1_person_detected:
        friendly_name: "Camera 1 Person detekterad"
        value_template: >-
          {{ is_state('sensor.camera_1_num_person_detected', '1')
             or is_state('sensor.camera_1_num_person_detected', '2')
             or is_state('sensor.camera_1_num_person_detected', '3')
             or is_state('sensor.camera_1_num_person_detected', '4')
             or is_state('sensor.camera_1_num_person_detected', '5')
             or is_state('sensor.camera_1_num_person_detected', '6')
             or is_state('sensor.camera_1_num_person_detected', '7')
             or is_state('sensor.camera_1_num_person_detected', '8')
             or is_state('sensor.camera_1_num_person_detected', '9')
             or is_state('sensor.camera_1_num_person_detected', '10') }}

input_text:
  camera_1_person_detected_timestamp:
    name: Camera 1 Tidpunkt för person detektering


# Used: 
# person, bicycle, car, motorcycle, bus, truck, boat,
# bird, cat, dog, horse, sheep, cow
# Not used: elephant, bear, zebra, giraffe,

# Unused:
# airplane, train, traffic light, fire hydrant, stop_sign,
# parking meter, bench,  backpack, umbrella, handbag, tie, suitcase,
# frisbee, skis, snowboard, sports ball, kite, baseball bat, baseball glove,
# skateboard, surfboard, tennis racket, bottle, wine glass, cup, fork,
# knife, spoon, bowl, banana, apple, sandwich, orange, broccoli, carrot,
# hot dog, pizza, donot, cake, chair, couch, potted plant, bed, dining table,
# toilet, tv, laptop, mouse, remote, keyboard, cell phone, microwave,
# oven, toaster, sink, refrigerator, book, clock, vase, scissors, teddy bear,
# hair dryer, toothbrush.