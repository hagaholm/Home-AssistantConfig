##################
### Automation ###
##################
automation:
  ##################################################################
  ### TO DEVELOP AND TEST                                        ###
  ### Camera 1 Record when person detected and camera mode Alarm ###
  ##################################################################
  - alias: Camera 1 Record when person detected
    trigger:
      # Person detected activated
      - platform: state
        entity_id: input_boolean.camera_1_detected_active
        to: 'on'

    condition:
      condition: and
      conditions:
        # Camera mode = Larm
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Larm'
        # Camera 1 is not recording
        - condition: state
          entity_id: input_boolean.camera_1_recording
          state: 'off'

    action:
      # Turn on: input_boolean.camera_1_recording
      - service: input_boolean.turn_on
        entity_id: input_boolean.camera_1_recording
        
      # Get timestamp when person detected
      - service: input_text.set_value
        entity_id: input_text.camera_1_person_detected_timestamp_video
        data_template:
          value: '{{ now().strftime("%Y%m%d_%H%M%S") }}'

      # Save a video with timestamp to '/config/camera/motion_detected/camera_1_YYYYMMDD-HHMMSS.mp4'        
      - service: camera.record
        data:
          entity_id: camera.kamera_1
          filename: '/config/camera/motion_detected/camera_1_{{ states.input_text.camera_1_person_detected_timestamp_video.state }}.mp4'
          lookback: 0
          duration: 60

      # 70 sec delay to make sure that record is finished
      - delay:
          seconds: 70

      # Move timestamp when person detected to another variable
      - service: input_text.set_value
        data_template:
          entity_id: input_text.camera_1_person_detected_timestamp_video_2
          value: "{{ states('input_text.camera_1_person_detected_timestamp_video') }}"

      # Turn off: input_boolean.camera_1_recording
      - service: input_boolean.turn_off
        entity_id: input_boolean.camera_1_recording

  #############################
  ### TO DEVELOP AND TEST   ###
  ### Camera 1 Record again ###
  #############################
  - alias: Camera 1 Record again
    trigger:
      # Camera 1 recording is finished
      - platform: state
        entity_id: input_boolean.camera_1_recording
        to: 'off'

    condition:
      condition: and
      conditions:
        # Camera mode = Larm 
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Larm'
        - condition: state
        # Camera 1 detected active
          entity_id: input_boolean.camera_1_detected_active
          state: 'on'
        # Person detected 
        - condition: state
          entity_id: binary_sensor.camera_1_person_detected
          state: 'on'

    action:
      # Turn on: input_boolean.camera_1_recording
      - service: input_boolean.turn_on
        entity_id: input_boolean.camera_1_recording

      # Get timestamp when person detected
      - service: input_text.set_value
        entity_id: input_text.camera_1_person_detected_timestamp_video
        data_template:
          value: '{{ now().strftime("%Y%m%d_%H%M%S") }}'

      # Save a video with timestamp to '/config/camera/motion_detected/camera_1_YYYYMMDD-HHMMSS.mp4'        
      - service: camera.record
        data:
          entity_id: camera.kamera_1
          filename: '/config/camera/motion_detected/camera_1_{{ states.input_text.camera_1_person_detected_timestamp_video.state }}.mp4'
          lookback: 0
          duration: 60

      # 70 sec delay to make sure that record is finished
      - delay:
          seconds: 70

      # Move timestamp when person detected to another variable
      - service: input_text.set_value
        data_template:
          entity_id: input_text.camera_1_person_detected_timestamp_video_2
          value: "{{ states('input_text.camera_1_person_detected_timestamp_video') }}"

      # Turn off: input_boolean.camera_1_recording
      - service: input_boolean.turn_off
        entity_id: input_boolean.camera_1_recording

  ########################################
  ### TO DEVELOP AND TEST              ###
  ### Camera 1 Move video after 2 min  ###
  ########################################
  - alias: Camera 1 Move video after 2 min
    trigger:
      # After 2 minutes after person detected, then input_boolean.camera_1_detected_active is set ot off
      platform: state
      entity_id: input_boolean.camera_1_detected_active
      to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera mode = Alarm
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Larm'

    action:
      - delay:
          seconds: 10

      # Copy camera/latest_person_away/camera_1_{{ states.input_text.camera_1_person_detected_timestamp_video_2.state }}.mp4 to www/latest_person_away as camera_1_1.mp4
      - service: shell_command.camera_1_copy_video

      # Move camera/latest_person_away/camera_1_{{ states.input_text.camera_1_person_detected_timestamp_video_2.state }}.mp4 to www/latest_person_away
      - service: shell_command.camera_1_move_video

      # Resize video
      - service: shell_command.camera_1_resize_video

      - delay:
          seconds: 15

      # Copy resized video
      - service: shell_command.camera_1_copy_resized_video

      # Generate index.html
#      - service: python_script.generate_directory_index
#        data:
#          top_dir: /config/www/alarm_small/
#          output_file: index_small.html
#          filter: "*.mp4"

  ##########################################
  ### TO DEVELOP AND TEST                ###
  ### Camera 1 Delete video after 2 min  ###
  ##########################################
  - alias: Camera 1 Delete video after 2 min 
    trigger:
      # After 2 minutes after person detected, then input_boolean.camera_1_detected_active is set ot off
      platform: state
      entity_id: input_boolean.camera_1_detected_active
      to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera mode = Info
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Info'

    action:
      - delay:
          seconds: 10

      # Delete camera/latest_person_away/*.mp4
      - service: shell_command.camera_1_delete_video