# Folder structure
# /config/camera/deepstack_photo
# Image is created here by deepstack if person is detected
# File with format deepstack_camera_2_YYYYMMDD-HHMMSS.jpg is not used
# File with format deepstack_camera_2_latest.jpg is copied and used as latest person /media/info/camera_2_1.jpg

# Folder
# /config/camera/motion_detected 
# When person detected and no one is home, then create image to this folder
# File with format camera_2_YYYYMMDD-HHMMSS.jpg is created
# File with format camera_2_1.jpg is created
# If home before 2 minutes, then all files in the foder is deleted
# After 2 minutes:
# If still away after 2 minutes, all files are moved into /media/warning
# When no more detection and still away, all files are moved into /media/warning


# Folder
#  /media/info
# Only /media/info/camera_2_1.jpg exist here

# Folder
# /media/warning
# Files with format camera_2_YYYYMMDD-HHMMSS.jpg and format camera_2_1.jpg exists here


########################
### Image processing ###
########################
image_processing:
  - platform: deepstack_object
    ip_address: localhost
    port: 5000
    api_key: !secret deepstack_password
    save_file_folder: /config/camera/deepstack_photo/
    save_timestamped_file: True
    targets:
      - target: person
        confidence: 65
    source:
      - entity_id: camera.kamera2
        name: deepstack_camera_2
    timeout: 5

##############
### Camera ###
##############
camera:
  # Keep latest image of a detected person
  - platform: local_file
    name: Camera 2 Latest person
    file_path: /media/info/camera_2_1.jpg

  # Keep latest image of a detected person away
  - platform: local_file
    name: Camera 2 Latest person away
    file_path: /media/warning/camera_2_1.jpg

##################
### Automation ###
##################
automation:
  ##########################################################
  ### At startup, activate input_boolean.camera_2_active ###
  ##########################################################
  - alias: Camera 2 startup
    mode: single

    trigger:
      - platform: homeassistant
        event: start

    action:
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.camera_2_active

      - delay:
          seconds: 10

      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.camera_2_active

  #############################################################
  ### At shutdown, inactivate input_boolean.camera_2_active ###
  #############################################################
  - alias: Camera 2 shutdown
    mode: single

    trigger:
      - platform: homeassistant
        event: shutdown

    action:
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.camera_2_active

  ##############################
  ### Start image processing ###
  ##############################
  - alias: Camera 2 Image processing
    mode: queued
    
    trigger:
      - platform: state
        entity_id: input_boolean.camera_2_active
        to: 'on'
    
    action:
      repeat:
        while:
          - condition: state
            entity_id: input_boolean.camera_2_active
            state: 'on'
        sequence:
          # Scan a new image
          - service: image_processing.scan
            data:
              entity_id: image_processing.deepstack_camera_2

          # Add dynamic delay. input_number.camera_duration is controlled by another automation
          - delay:
              milliseconds: "{{ states.input_number.camera_duration.state }}"

  #########################################
  ### Camera 2 Folder Watcher activated ###
  #########################################
  - alias: Camera 2 Folder Watcher activated
    mode: single

    trigger:
      # File modified: '/config/camera/deepstack_photo/deepstack_camera_2_latest.jpg'
      - platform: event
        event_type: folder_watcher
        event_data:
          event_type: modified
          path: '/config/camera/deepstack_photo/deepstack_camera_2_latest.jpg'

    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.camera_2_folder_watcher_detected
          state: 'off'

    action:
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.camera_2_folder_watcher_detected

      - delay:
          seconds: 1

      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.camera_2_folder_watcher_detected

  #######################################################################################
  ### Camera detected, start timer and turn on input_boolean.camera_2_detected_active ###
  #######################################################################################
  ### - if camera mode = Away                                                         ###
  ### - if timer off                                                                  ###
  #######################################################################################
  - alias: Camera 2 Start timer
    mode: single

    trigger:
      - platform: state
        entity_id: input_boolean.camera_2_folder_watcher_detected
        to: 'on'

    condition:
      condition: and
      conditions:
        # Camera mode = Away
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Away'
        # Camera 2 has not detected any person earlier (timer is not running since last detected person)
        - condition: state
          entity_id: input_boolean.camera_2_detected_active
          state: 'off'

    action:
      # camera_2_detected_active = on
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.camera_2_detected_active

      # Cancel timer and reset to max time
      - service: timer.cancel
        entity_id: timer.timer_camera_2

      # Start timer and count down
      - service: timer.start
        entity_id: timer.timer_camera_2

  #####################################################
  ### Camera, vid stoppad timer                     ###
  #####################################################
  ### input_boolean.camera_2_detected_active == off ###
  ### - efter 2 min                                 ###
  #####################################################
  - alias: Camera 2 Stop timer
    trigger:
      # Timer finished after 2 min
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.timer_camera_2
 
    condition:
      condition: and
      conditions:
        # camera_2_detected_active = on
        - condition: state
          entity_id: input_boolean.camera_2_detected_active
          state: 'on'
 
    action:
      # camera_2_detected_active set to on, as it has been running 2 min without any new detection
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.camera_2_detected_active

  ############################################################################
  ### Camera 2 Image when person detected and camera mode = Day            ###
  ############################################################################
  ### When person detected, make the last image available                  ###
  ### - Copy Deepstack image when person detected, mode Day                ###
  ###   from: /config/camera/deepstack_photo/deepstack_camera_2_latest.jpg ###
  ###   to: /media/info/camera_2_1.jpg                                     ###
  ############################################################################
  - alias: Camera 2 Image when person detected and camera mode Day
    mode: queued

    trigger:
      - platform: state
        entity_id: input_boolean.camera_2_folder_watcher_detected
        to: 'on'

    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Day'
    action:
      # Need to add a delay, otherwise it take the old photo
      - delay:
          seconds: 1

      # copy /config/camera/deepstack_photo/deepstack_camera_2_latest.jpg
      # to /media/info/camera_2_1.jpg
      - service: shell_command.camera_2_copy_deepstack_to_info

  ################################################################################################
  ### Camera 2 Image when person detected and camera mode = Away                               ###
  ################################################################################################
  ### When person detected and away                                                            ###
  ### - Create snapshot saved as '/config/camera/motion_detected/camera_2_YYYYMMDD-HHMMSS.jpg' ###
  ### - Also make a copy to '/config/camera/motion_detected/camera_2_1.jpg'                    ###
  ################################################################################################
  - alias: Camera 2 Image when person detected and camera mode Away
    mode: queued
    
    trigger:
      - platform: state
        entity_id: input_boolean.camera_2_folder_watcher_detected
        to: 'on'

    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Away'

    action:
      # Get timestamp when person detected
      - service: input_text.set_value
        entity_id: input_text.camera_2_person_detected_timestamp_photo
        data_template: 
          value: '{{ now().strftime("%Y%m%d_%H%M%S") }}'

      # Make a copy from deepstack to motion_detected, to be used if still away after 2 min
      - service: shell_command.camera_2_deepstack_to_motion_detected_1

      # Make a copy, to be used if still away after 2 min
      - service: shell_command.camera_2_deepstack_to_motion_detected_2

  #####################################################################################
  ### Camera 2 Image when person detected and camera mode = Night                   ###
  #####################################################################################
  ### When person detected and night                                                ###
  ### - Create snapshot saved as '/media/warning/camera_2_YYYYMMDD-HHMMSS.jpg' ###
  ### - Also make a copy to '/media/warning/camera_2_1.jpg'                    ###
  ### - Also send a notify about it                                                 ###
  #####################################################################################
  - alias: Camera 2 Image when person detected and camera mode Night
    mode: queued
    
    trigger:
      - platform: state
        entity_id: input_boolean.camera_2_folder_watcher_detected
        to: 'on'

    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Night'

    action:
      # Get timestamp when person detected
      - service: input_text.set_value
        entity_id: input_text.camera_2_person_detected_timestamp_photo
        data_template: 
          value: '{{ now().strftime("%Y%m%d_%H%M%S") }}'

      # Make a copy from deepstack to warning
      - service: shell_command.camera_2_deepstack_to_warning

      # Make a copy of the file in warning
      - service: shell_command.camera_2_warning_to_warning

      # Need to add a delay, otherwise it take the old photo
      - delay:
          seconds: 1

      # Send notify
# Need to find a solution to not send every time a new detection as it will send many notifies 
#      - service: notify.pushbullet
#        data:
#          title: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
#          message: "Camera 2 Person detekterad night: {{ states.input_text.camera_2_person_detected_timestamp_photo.state }}"
#          data:
#            file: /media/warning/camera_2_1.jpg

  ############################################
  ### Camera 2 Notify when person detected ###
  ############################################
  - alias: Camera 2 Notify when person detected
    trigger:
      # After 2 minutes after person detected
      - platform: state
        entity_id: input_boolean.camera_2_detected_active
        to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera mode = Away
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Away'

    action:
      # Need to add a delay, otherwise it take the old photo
      - delay:
          seconds: 1

      # Send notify
      - service: notify.pushbullet
        data:
          title: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          message: "Camera 2 Person detekterad away: {{ states.input_text.camera_2_person_detected_timestamp_photo.state }}"
          data:
            file: /media/warning/camera_2_1.jpg

  ###################################################################
  ### Camera 2 Move motion_detection files to warning after 2 min ###
  ###################################################################
  - alias: Camera 2 Move motion_detection files to warning after 2 min
    trigger:
      # After 2 minutes after person detected
      - platform: state
        entity_id: input_boolean.camera_2_detected_active
        to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera mode = Away
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Away'

    action:
      # Make a copy for all camera/motion_detected to www/warning
      - service: shell_command.camera_2_move_camera_motion_detected_to_warning

  #########################################################################
  ### Camera 2 Move motion_detection files to warning when no detection ###
  #########################################################################
  - alias: Camera 2 Move motion_detection files to warning when no detection
    trigger:
      # After 2 minutes after person detected
      - platform: state
        entity_id: input_boolean.camera_2_detected_active
        to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera mode = Away
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Away'

    action:
      # Make a copy for all camera/motion_detected to www/warning
      - service: shell_command.camera_2_move_camera_motion_detected_to_warning

  #############################################
  ### Camera 2 Delete motion_detected files ###
  #############################################
  - alias: Camera 2 Delete motion_detected files
    trigger:
      # After 2 minutes after person detected
      - platform: state
        entity_id: input_boolean.camera_2_detected_active
        to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera mode = Day
        - condition: state
          entity_id: input_select.camera_mode
          state: 'Day'

    action:
      # If exist, move camera_2_1.jpg from motion_detected to info before all files removes from motion_detected
      - service: shell_command.camera_2_move_motion_detected_file_info
      
      # Make a delete for all camera/motion_detected
      - service: shell_command.camera_2_delete_motion_detected_files

  ######################################
  ### Camera 2 Other motion detected ###
  ######################################
  - alias: Camera 2 Other motion detected
    trigger:
      - platform: numeric_state 
        entity_id: sensor.camera_2_cat_found
        above: 0
      - platform: numeric_state 
        entity_id: sensor.camera_2_dog_found
        above: 0
      - platform: numeric_state 
        entity_id: sensor.camera_2_cow_found
        above: 0
      - platform: numeric_state 
        entity_id: sensor.camera_2_sheep_found
        above: 0
      - platform: numeric_state 
        entity_id: sensor.camera_2_horse_found
        above: 0
        
    action:
      # Save a photo with timestamp to '/media/info/camera_2_other.jpg'
      - service: camera.snapshot
        data:
          entity_id: camera.kamera2
          filename: '/media/info/camera_2_other.jpg'

      # Need to add a delay, otherwise it take the old photo
      - delay:
          seconds: 1

      # Send a notify with a photo
      - service: notify.pushbullet
        data:
          title: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          message: "Fångat av kamera 2"
          data:
            file: /media/info/camera_2_other.jpg

##############
### Script ###
##############
script:
  camera_2_use_image:
    alias: Camera 2 Aktivera bildläge
    sequence:
      - service: automation.turn_off
        entity_id: automation.camera_2_record_when_person_detected_away
      - service: automation.turn_off
        entity_id: automation.camera_2_record_again_if_still_away
      - service: automation.turn_off
        entity_id: automation.camera_2_move_video_if_still_away_after_2_min
      - service: automation.turn_off
        entity_id: automation.camera_2_delete_video_if_home_after_2_min

      - service: automation.turn_on
        entity_id: automation.camera_2_image_processing_detection_activated
      - service: automation.turn_on
        entity_id: automation.camera_2_image_processing_detection_inactivated

  camera_2_use_video:
    alias: Camera 2 Aktivera videoläge
    sequence:
      - service: automation.turn_off
        entity_id: automation.camera_2_image_processing_detection_activated
      - service: automation.turn_off
        entity_id: automation.camera_2_image_processing_detection_inactivated

      - service: automation.turn_on
        entity_id: automation.camera_2_record_when_person_detected_away
      - service: automation.turn_on
        entity_id: automation.camera_2_record_again_if_still_away
      - service: automation.turn_on
        entity_id: automation.camera_2_move_video_if_still_away_after_2_min
      - service: automation.turn_on
        entity_id: automation.camera_2_delete_video_if_home_after_2_min

#####################
### Shell command ###
#####################
shell_command:
  # Used by automation Camera 2 Image when person detected
  camera_2_copy_deepstack_to_info: "cp /config/camera/deepstack_photo/deepstack_camera_2_latest.jpg /media/info/camera_2_1.jpg"

  # Used by automation Camera 2 Image when person detected Away
  camera_2_deepstack_to_motion_detected_1: "cp '/config/camera/deepstack_photo/deepstack_camera_2_latest.jpg' '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_photo.state }}.jpg'"

  # Used by automation Camera 2 Image when person detected Away
  camera_2_deepstack_to_motion_detected_2: "cp '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_photo.state }}.jpg' '/config/camera/motion_detected/camera_2_1.jpg'"

  # Used by automation Camera 2 Image when person detected Night
  camera_2_deepstack_to_warning: "cp '/config/camera/deepstack_photo/deepstack_camera_2_latest.jpg' '/media/warning/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_photo.state }}.jpg'"

  # Used by automation Camera 2 Image when person detected Night
  camera_2_warning_to_warning: "cp '/media/warning/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_photo.state }}.jpg' '/media/warning/camera_2_1.jpg'"

  # Used by automation Camera 2 Move video if still away after 2 min
  camera_2_copy_video: "cp '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}.mp4' '/media/warning/camera_2_1.mp4'"

  # Used by automation Camera 2 Move video if still away after 2 min
  camera_2_move_video: "mv '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}.mp4' '/media/warning/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}.mp4'"

  # Used by automation Camera 2 Move video if still away after 2 min
  camera_2_resize_video: "ffmpeg -y -loglevel error -i /media/warning/camera_2_1.mp4 -vf scale='320:-1' /media/warning_small/camera_2_1_320.mp4"

  # Used by automation Camera 2 Move video if still away after 2 min
  camera_2_copy_resized_video: "cp '/media/warning_small/camera_2_1_320.mp4' '/media/warning_small/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}_320.mp4'"

  # Used by automation Camera 2 Delete video if home after 2 min
  camera_2_delete_video: "rm -f /config/camera/motion_detected/camera_2_*.mp4"

  # Used by automation Camera 2 Move motion_detection files to warning after 2 min
  # Used by automation Camera 2 Move motion_detection files to warning when no detection
  camera_2_move_camera_motion_detected_to_warning: "mv -f /config/camera/motion_detected/camera_2_*.jpg /media/warning/"

  # Used by automation Camera 2 Delete motion_detected files
  camera_2_move_motion_detected_file_info:  "mv -f /config/camera/motion_detected/camera_2_1.jpg /media/info/"

  # Used by automation Camera 2 Delete motion_detected files
  camera_2_delete_motion_detected_files: "rm -f /config/camera/motion_detected/camera_2_*.jpg"

#####################
### Input Boolean ###
#####################
input_boolean:
  camera_2_active:
    name: Camera 2 aktiv
    initial: off
    
  camera_2_recording:
    name: Camera 2 spelar in
    initial: off

  camera_2_detected_active:
    name: Camera 2 detekterad aktiv
    initial: off

  camera_2_folder_watcher_detected:
    name: Camera 2 folder watcher detekterad
    initial: off

#####################
### Binary Sensor ###
#####################
binary_sensor:
  - platform: template
    sensors:
      camera_2_person_detected:
        friendly_name: "Person detekterad"
        value_template: >-
          {{ states('image_processing.deepstack_camera_2') != '0' }}

input_text:
  camera_2_person_detected_timestamp_photo:
    name: Camera 2 Tidpunkt för person detektering foto
  camera_2_person_detected_timestamp_photo_2:
    name: Camera 2 Tidpunkt för person detektering foto föregående
  camera_2_person_detected_timestamp_video:
    name: Camera 2 Tidpunkt för person detektering video
  camera_2_person_detected_timestamp_video_2:
    name: Camera 2 Tidpunkt för person detektering video föregående

timer:
  # Timer för camera 2
  timer_camera_2:
    name: Timer camera 2
    duration: '00:02:00'

sensor:
  - platform: template
    sensors:
      camera_2_cat_found:
        friendly_name: "Katter"
        value_template: >-
          {% set summary = (state_attr('image_processing.deepstack_camera_2', 'summary')) %}
          {% if summary.cat %}
            {{ summary.cat }}
          {% else %}
            0
          {% endif %}

      camera_2_bird_found:
        friendly_name: "Fåglar"
        value_template: >-
          {% set summary = (state_attr('image_processing.deepstack_camera_2', 'summary')) %}
          {% if summary.bird %}
            {{ summary.bird }}
          {% else %}
            0
          {% endif %}

      camera_2_dog_found:
        friendly_name: "Hundar"
        value_template: >-
          {% set summary = (state_attr('image_processing.deepstack_camera_2', 'summary')) %}
          {% if summary.dog %}
            {{ summary.dog }}
          {% else %}
            0
          {% endif %}

      camera_2_horse_found:
        friendly_name: "Hästar"
        value_template: >-
          {% set summary = (state_attr('image_processing.deepstack_camera_2', 'summary')) %}
          {% if summary.horse %}
            {{ summary.horse }}
          {% else %}
            0
          {% endif %}

      camera_2_sheep_found:
        friendly_name: "Får"
        value_template: >-
          {% set summary = (state_attr('image_processing.deepstack_camera_2', 'summary')) %}
          {% if summary.sheep %}
            {{ summary.sheep }}
          {% else %}
            0
          {% endif %}

      camera_2_cow_found:
        friendly_name: "Kor"
        value_template: >-
          {% set summary = (state_attr('image_processing.deepstack_camera_2', 'summary')) %}
          {% if summary.cow %}
            {{ summary.cow }}
          {% else %}
            0
          {% endif %}

# Used: 
# person, bicycle, car, motorcycle, bus, truck, boat,
# bird, cat, dog, horse, sheep, cow

# Not used: elephant, bear, zebra, giraffe,

# Unused:
# airplane, train, traffic light, fire hydrant, stop_sign,
# parking meter, bench,  backpack, umbrella, handbag, tie, suitcase,
# frisbee, skis, snowboard, sports ball, kite, baseball bat, baseball glove,
# skateboard, surfboard, tennis racket, bottle, wine glass, cup, fork,
# knife, spoon, bowl, banana, apple, sandwich, orange, broccoli, carrot,
# hot dog, pizza, donot, cake, chair, couch, potted plant, bed, dining table,
# toilet, tv, laptop, mouse, remote, keyboard, cell phone, microwave,
# oven, toaster, sink, refrigerator, book, clock, vase, scissors, teddy bear,
# hair dryer, toothbrush.