# Folder structure
# /config/camera/deepstack_photo
# Image is created here by deepstack if person is detected
# File with format deepstack_camera_2_YYYYMMDD-HHMMSS.jpg is not used
# File with format deepstack_camera_2_latest.jpg is copied and used as latest person /config/www/motion_detected/camera_2_1.jpg

# Folder
# /config/camera/motion_detected 
# When person detected and no one is home, then create image to this folder
# File with format camera_2_YYYYMMDD-HHMMSS.jpg is created
# File with format camera_2_1.jpg is created
# If home before 2 minutes, then all files in the foder is deleted
# After 2 minutes:
# If still away after 2 minutes, all files are moved into /config/www/motion_detected
# When no more detection and still away, all files are moved into /config/www/motion_detected


# Folder
#  /config/www/motion_detected
# Only /config/www/motion_detected/camera_2_1.jpg exist here

# Folder
# /config/www/motion_detected_away
# Files with format camera_2_YYYYMMDD-HHMMSS.jpg and format camera_2_1.jpg exists here


########################
### Image processing ###
########################
image_processing:
  - platform: deepstack_object
    ip_address: localhost
    port: 5000
    api_key: !secret deepstack_password
    save_file_folder: /config/camera/deepstack_photo/
    save_timestamped_file: True
    targets:
      - person
    source:
      - entity_id: camera.kamera_2
        name: deepstack_camera_2

##############
### Camera ###
##############
camera:
  # Keep latest image of a detected person
  - platform: local_file
    name: Camera 2 Latest person
    file_path: /config/www/motion_detected/camera_2_1.jpg
  # Keep latest image of a detected person away
  - platform: local_file
    name: Camera 2 Latest person away
    file_path: /config/www/motion_detected_away/camera_2_1.jpg

  # Keep latest video of a detected person
  - platform: local_file
    name: Camera 2 Latest person video
    file_path: /config/www/motion_detected/camera_2_1.mp4
  # Keep latest video of a detected person away
  - platform: local_file
    name: Camera 2 Latest person away video
    file_path: /config/www/motion_detected_away/camera_2_1.mp4

##################
### Automation ###
##################
automation:
  #######################################
  ### Camera detected, start timer    ###
  #######################################
  ### - if camera detection activated ###
  ### - if timer off                  ###
  #######################################
  - alias: Camera 2 Start timer
    trigger:
      # File modified: '/config/camera/deepstack_photo/deepstack_camera_2_latest.jpg'
      - platform: event
        event_type: folder_watcher
        event_data:
          event_type: modified
          path: '/config/camera/deepstack_photo/deepstack_camera_2_latest.jpg'

    condition:
      condition: and
      conditions:
        # Camera detection activated, activated when home status is "Borta" or "Hemma av"
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'on'
        # Camera 2 has not detected any person earlier
        - condition: state
          entity_id: input_boolean.camera_2_detected_active
          state: 'off'

    action:
      # Activate camera_2_detected_active
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.camera_2_detected_active

      # Cancel timer, reset to max time
      - service: timer.cancel
        entity_id: timer.timer_camera_2_detected

      # Start timer, count down
      - service: timer.start
        entity_id: timer.timer_camera_2_detected

  #####################################################
  ### Camera, vid stoppad timer                     ###
  #####################################################
  ### input_boolean.camera_2_detected_active == off ###
  ### - efter 2 min                                 ###
  #####################################################
  - alias: Camera 2 Stop timer
    trigger:
      # Timer finished after 2 min
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.timer_camera_2_detected
 
    condition:
      condition: and
      conditions:
        # camera_2_detected_active activated
        - condition: state
          entity_id: input_boolean.camera_2_detected_active
          state: 'on'
 
    action:
      # camera_2_detected_active set to inactivated, as it has been running 2 min
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.camera_2_detected_active

  ###########################################################################
  ### TO DEVELOP AND TEST                                                 ###
  ### Camera 2 Record when person detected and camera detection activated ###
  ###########################################################################
  - alias: Camera 2 Record when person detected
    trigger:
      # Person detected activated
      - platform: state
        entity_id: input_boolean.camera_2_detected_active
        to: 'on'

    condition:
      condition: and
      conditions:
        # Camera detection activated
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'on'
        # Camera 2 is not recording
        - condition: state
          entity_id: input_boolean.camera_2_recording
          state: 'off'

    action:
      # Turn on: input_boolean.camera_2_recording
      - service: input_boolean.turn_on
        entity_id: input_boolean.camera_2_recording
        
      # Get timestamp when person detected
      - service: input_text.set_value
        entity_id: input_text.camera_2_person_detected_timestamp_video
        data_template:
          value: '{{ now().strftime("%Y%m%d_%H%M%S") }}'

      # Save a video with timestamp to '/config/camera/motion_detected/camera_2_YYYYMMDD-HHMMSS.mp4'        
      - service: camera.record
        data:
          entity_id: camera.kamera_2
          filename: '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video.state }}.mp4'
          lookback: 0
          duration: 60

      # 70 sec delay to make sure that record is finished
      - delay:
          seconds: 70

      # Move timestamp when person detected to another variable
      - service: input_text.set_value
        data_template:
          entity_id: input_text.camera_2_person_detected_timestamp_video_2
          value: "{{ states('input_text.camera_2_person_detected_timestamp_video') }}"

      # Turn off: input_boolean.camera_2_recording
      - service: input_boolean.turn_off
        entity_id: input_boolean.camera_2_recording

  #############################
  ### TO DEVELOP AND TEST   ###
  ### Camera 2 Record again ###
  #############################
  - alias: Camera 2 Record again
    trigger:
      # Camera 2 recording is finished
      - platform: state
        entity_id: input_boolean.camera_2_recording
        to: 'off'

    condition:
      condition: and
      conditions:
        # Camera detection activated 
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'on'
        - condition: state
        # Camera 2 detected active
          entity_id: input_boolean.camera_2_detected_active
          state: 'on'
        # Person detected 
        - condition: state
          entity_id: binary_sensor.camera_2_person_detected
          state: 'on'

    action:
      # Turn on: input_boolean.camera_2_recording
      - service: input_boolean.turn_on
        entity_id: input_boolean.camera_2_recording

      # Get timestamp when person detected
      - service: input_text.set_value
        entity_id: input_text.camera_2_person_detected_timestamp_video
        data_template:
          value: '{{ now().strftime("%Y%m%d_%H%M%S") }}'

      # Save a video with timestamp to '/config/camera/motion_detected/camera_2_YYYYMMDD-HHMMSS.mp4'        
      - service: camera.record
        data:
          entity_id: camera.kamera_2
          filename: '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video.state }}.mp4'
          lookback: 0
          duration: 60

      # 70 sec delay to make sure that record is finished
      - delay:
          seconds: 70

      # Move timestamp when person detected to another variable
      - service: input_text.set_value
        data_template:
          entity_id: input_text.camera_2_person_detected_timestamp_video_2
          value: "{{ states('input_text.camera_2_person_detected_timestamp_video') }}"

      # Turn off: input_boolean.camera_2_recording
      - service: input_boolean.turn_off
        entity_id: input_boolean.camera_2_recording

  ########################################
  ### TO DEVELOP AND TEST              ###
  ### Camera 2 Move video after 2 min  ###
  ########################################
  - alias: Camera 2 Move video after 2 min
    trigger:
      # After 2 minutes after person detected, then input_boolean.camera_2_detected_active is set ot off
      platform: state
      entity_id: input_boolean.camera_2_detected_active
      to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera detection activated
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'on'

    action:
      - delay:
          seconds: 10

      # Copy camera/latest_person_away/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}.mp4 to www/latest_person_away as camera_2_1.mp4
      - service: shell_command.camera_2_copy_video

      # Move camera/latest_person_away/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}.mp4 to www/latest_person_away
      - service: shell_command.camera_2_move_video

      # Resize video
      - service: shell_command.camera_2_resize_video

      - delay:
          seconds: 15

      # Copy resized video
      - service: shell_command.camera_2_copy_resized_video

      # Generate index.html
#      - service: python_script.generate_directory_index
#        data:
#          top_dir: /config/www/motion_detected_away_small/
#          output_file: index_small.html
#          filter: "*.mp4"

  ##########################################
  ### TO DEVELOP AND TEST                ###
  ### Camera 2 Delete video after 2 min  ###
  ##########################################
  - alias: Camera 2 Delete video after 2 min 
    trigger:
      # After 2 minutes after person detected, then input_boolean.camera_2_detected_active is set ot off
      platform: state
      entity_id: input_boolean.camera_2_detected_active
      to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera detection inactivated
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'off'

    action:
      - delay:
          seconds: 10

      # Delete camera/latest_person_away/*.mp4
      - service: shell_command.camera_2_delete_video

  ############################################################################
  ### Camera 2 Image when person detected and camera detection inactivated ###
  ############################################################################
  ### When person detected, make the last image available                  ###
  ### - Copy Deepstack image when person detected                          ###
  ###   from: /config/camera/deepstack_photo/deepstack_camera_2_latest.jpg ###
  ###   to: /config/www/motion_detected/camera_2_1.jpg                     ###
  ############################################################################
  - alias: Camera 2 Image when person detected and camera detection inactivated
    trigger:
      - platform: event
        event_type: folder_watcher
        event_data:
          event_type: modified
          path: '/config/camera/deepstack_photo/deepstack_camera_2_latest.jpg'

    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'off'
    action:
      # Need to add a delay, otherwise it take the old photo
      - delay:
          seconds: 1

      # copy /config/camera/deepstack_photo/deepstack_camera_2_latest.jpg
      # to /config/www/motion_detected/camera_2_1.jpg
      - service: shell_command.camera_2_copy_latest_motion

  ################################################################################################
  ### Camera 2 Image when person detected and camera detection activated                       ###
  ################################################################################################
  ### When person detected and away                                                            ###
  ### - Create snapshot saved as '/config/camera/motion_detected/camera_2_YYYYMMDD-HHMMSS.jpg' ###
  ### - Also make a copy to '/config/latest_person_away/person/camera_2_1.jpg'                 ###
  ################################################################################################
  - alias: Camera 2 Image when person detected and camera detection activated
    trigger:
      - platform: event
        event_type: folder_watcher
        event_data:
          event_type: modified
          path: '/config/camera/deepstack_photo/deepstack_camera_2_latest.jpg'

    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'on'

    action:
      # Get timestamp when person detected
      - service: input_text.set_value
        entity_id: input_text.camera_2_person_detected_timestamp_photo
        data_template: 
          value: '{{ now().strftime("%Y%m%d_%H%M%S") }}'

#      # Save a photo with timestamp to '/config/camera/motion_detected/camera_2_YYYYMMDD-HHMMSS.jpg'
#      - service: camera.snapshot
#        data:
#          entity_id: camera.kamera_2
#          filename: '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_photo.state }}.jpg'

      # Make a copy from latest person, to latest person
      - service: shell_command.camera_2_copy_to_latest_motion_away_1

      # Make a copy for latest person away, to be used when detect that nobody home
      - service: shell_command.camera_2_copy_to_latest_motion_away_2

  ###########################################
  ### Camera 2 Alarm when person detected ###
  ###########################################
  - alias: Camera 2 Alarm when person detected
    trigger:
      # After 2 minutes after person detected
      platform: state
      entity_id: input_boolean.camera_2_detected_active
      to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera detection activated
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'on'

    action:
      # Send notify
      - service: notify.pushbullet
        data:
          title: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          message: "Camera 2 Person detekterad: {{ states.input_text.camera_2_person_detected_timestamp_photo.state }}"
          data:
            file: /config/www/motion_detected_away/camera_2_1.jpg

  ##########################################################
  ### Camera 2 Move latest_person_away files after 2 min ###
  ##########################################################
  - alias: Camera 2 Move latest_person_away files after 2 min
    trigger:
      # After 2 minutes after person detected
      platform: state
      entity_id: input_boolean.camera_2_detected_active
      to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera detection activated
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'on'

    action:
      # Make a copy for all camera/latest_person_away to www/latest_person_away
      - service: shell_command.camera_2_move_camera_latest_person_away_to_www_latest_person_away

  ################################################################
  ### Camera 2 Move latest_person_away files when no detection ###
  ################################################################
  - alias: Camera 2 Move latest_person_away files when no detection
    trigger:
      - platform: state
        entity_id: binary_sensor.camera_2_person_detected
        from: 'on'
        to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera detection activated
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'on'

    action:
      # Make a copy for all camera/latest_person_away to www/latest_person_away
      - service: shell_command.camera_2_move_camera_latest_person_away_to_www_latest_person_away

  ################################################
  ### Camera 2 Delete latest_person_away files ###
  ################################################
  - alias: Camera 2 Delete latest_person_away files
    trigger:
      - platform: state
        entity_id: binary_sensor.camera_2_person_detected
        from: 'on'
        to: 'off'

    condition:
      condition: and
      conditions:
        # Only if camera detection inactivated
        - condition: state
          entity_id: input_boolean.camera_detection_activated
          state: 'off'

    action:
      # Make a delete for all camera/latest_person_away
      - service: shell_command.camera_2_delete_camera_latest_person_away

##############
### Script ###
##############
script:
  camera_2_use_image:
    alias: Kamera 2 Aktivera bildläge
    sequence:
      - service: automation.turn_off
        entity_id: automation.camera_2_record_when_person_detected_away
      - service: automation.turn_off
        entity_id: automation.camera_2_record_again_if_still_away
      - service: automation.turn_off
        entity_id: automation.camera_2_move_video_if_still_away_after_2_min
      - service: automation.turn_off
        entity_id: automation.camera_2_delete_video_if_home_after_2_min

#      - service: automation.turn_on
#        entity_id: automation.camera_2_delete_latest_person_away_files_when_home
#      - service: automation.turn_on
#        entity_id: automation.camera_2_move_latest_person_away_files_when_no_detection
#      - service: automation.turn_on
#        entity_id: automation.camera_2_move_latest_person_away_files_after_2_min
      - service: automation.turn_on
        entity_id: automation.camera_2_image_processing_detection_activated
      - service: automation.turn_on
        entity_id: automation.camera_2_image_processing_detection_inactivated

  camera_2_use_video:
    alias: Kamera 2 Aktivera videoläge
    sequence:
#      - service: automation.turn_off
#        entity_id: automation.camera_2_delete_latest_person_away_files_when_home
#      - service: automation.turn_off
#        entity_id: automation.camera_2_move_latest_person_away_files_when_no_detection
#      - service: automation.turn_off
#        entity_id: automation.camera_2_move_latest_person_away_files_after_2_min
      - service: automation.turn_off
        entity_id: automation.camera_2_image_processing_detection_activated
      - service: automation.turn_off
        entity_id: automation.camera_2_image_processing_detection_inactivated

      - service: automation.turn_on
        entity_id: automation.camera_2_record_when_person_detected_away
      - service: automation.turn_on
        entity_id: automation.camera_2_record_again_if_still_away
      - service: automation.turn_on
        entity_id: automation.camera_2_move_video_if_still_away_after_2_min
      - service: automation.turn_on
        entity_id: automation.camera_2_delete_video_if_home_after_2_min

#####################
### Shell command ###
#####################
shell_command:
  # Used by automation Camera 2 Image when person detected
  camera_2_copy_latest_motion: 'cp /config/camera/deepstack_photo/deepstack_camera_2_latest.jpg /config/www/motion_detected/camera_2_1.jpg'

  # Used by automation Camera 2 Image when person detected away
  camera_2_copy_to_latest_motion_away_1: "cp /config/camera/deepstack_photo/deepstack_camera_2_latest.jpg '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_photo.state }}.jpg'"

  # Used by automation Camera 2 Image when person detected away
  camera_2_copy_to_latest_motion_away_2: "cp '/config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_photo.state }}.jpg' '/config/camera/motion_detected/camera_2_1.jpg'"

  # Used by automation Camera 2 Move video if still away after 2 min
  camera_2_copy_video: "cp /config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}.mp4 /config/www/motion_detected_away/camera_2_1.mp4"

  # Used by automation Camera 2 Move video if still away after 2 min
  camera_2_move_video: "mv /config/camera/motion_detected/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}.mp4 /config/www/motion_detected_away/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}.mp4"

  # Used by automation Camera 2 Move video if still away after 2 min
  camera_2_resize_video: "ffmpeg -y -loglevel error -i /config/www/motion_detected_away/camera_2_1.mp4 -vf scale='320:-1' /config/www/motion_detected_away_small/camera_2_1_320.mp4"

  # Used by automation Camera 2 Move video if still away after 2 min
  camera_2_copy_resized_video: "cp /config/www/motion_detected_away_small/camera_2_1_320.mp4 /config/www/motion_detected_away_small/camera_2_{{ states.input_text.camera_2_person_detected_timestamp_video_2.state }}_320.mp4"

  # Used by automation Camera 2 Delete video if home after 2 min
  camera_2_delete_video: "rm /config/camera/motion_detected/camera_2_*.mp4"

  # Used by automation Camera 2 Move latest_person_away files after 2 min
  # Used by automation Camera 2 Move latest_person_away files when no detection
  camera_2_move_camera_latest_person_away_to_www_latest_person_away: "mv /config/camera/motion_detected/*.jpg /config/www/motion_detected_away/"

  # Used by automation Camera 2 Delete latest_person_away files when home 
  camera_2_delete_camera_latest_person_away: "rm /config/camera/motion_detected/*.jpg"

#####################
### Input Boolean ###
#####################
input_boolean:
  camera_2_recording:
    name: Camera 2 spelar in
    initial: off

  camera_2_detected_active:
    name: Kamera 2 detekterad aktiv
    initial: off

#####################
### Binary Sensor ###
#####################
binary_sensor:
  - platform: template
    sensors:
      camera_2_person_detected:
        friendly_name: "Camera 2 Person detekterad"
        value_template: >-
          {{ states('image_processing.deepstack_camera_2') != '0' }}

input_text:
  camera_2_person_detected_timestamp_photo:
    name: Camera 2 Tidpunkt för person detektering foto
  camera_2_person_detected_timestamp_photo_2:
    name: Camera 2 Tidpunkt för person detektering foto föregående
  camera_2_person_detected_timestamp_video:
    name: Camera 2 Tidpunkt för person detektering video
  camera_2_person_detected_timestamp_video_2:
    name: Camera 2 Tidpunkt för person detektering video föregående

timer:
  # Timer för camera 2 detekterad
  timer_camera_2_detected:
    name: Tid kvar kamera 2 detekterad
    duration: '00:02:00'



# Used: 
# person, bicycle, car, motorcycle, bus, truck, boat,
# bird, cat, dog, horse, sheep, cow
# Not used: elephant, bear, zebra, giraffe,

# Unused:
# airplane, train, traffic light, fire hydrant, stop_sign,
# parking meter, bench,  backpack, umbrella, handbag, tie, suitcase,
# frisbee, skis, snowboard, sports ball, kite, baseball bat, baseball glove,
# skateboard, surfboard, tennis racket, bottle, wine glass, cup, fork,
# knife, spoon, bowl, banana, apple, sandwich, orange, broccoli, carrot,
# hot dog, pizza, donot, cake, chair, couch, potted plant, bed, dining table,
# toilet, tv, laptop, mouse, remote, keyboard, cell phone, microwave,
# oven, toaster, sink, refrigerator, book, clock, vase, scissors, teddy bear,
# hair dryer, toothbrush.